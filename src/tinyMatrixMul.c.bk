#include <sys/mman.h>
#include <tinyMatrixMul.h>
#include <arm_neon.h>
#include <string.h>
#include <arm_neon.h>
#include <sys/time.h>
#include "asmNeonApi.h"

//#define ENABLE_SPARSE

//#define NCOPY_ASM
//#define TCOPY_ASM

//#define USE_MALLOC

static inline void* tinyMalloc(uint32_t size)
{
#ifdef USE_MALLOC
	return malloc(size);
#else
	return mmap(NULL, size, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
#endif
}

static inline int tinyFree(void * pAddr, uint32_t size)
{
#ifdef USE_MALLOC
	free(pAddr);
#else
	return munmap(pAddr, size);
#endif
}

static int ncopy_4_k(const float *pSrc, float *pDst, uint32_t K, uint32_t stride, uint32_t numThreads, uint32_t *pSparseFlag)
{
	int ret = 0;
	uint32_t i, KDiv4, KHas2, KHas1;
#ifdef NCOPY_ASM
	uint32_t stridex4 = 4*stride;
#endif
	(void)numThreads;
	KDiv4 = K>>2; KHas2 = (K>>1)&1; KHas1 = K&1;

	for ( i = 0; i < KDiv4; i++)
	{
#ifdef NCOPY_ASM
		pSparseFlag[i] = ncopy_4x4_asm_sparse((uint32_t *)pSrc, stridex4, (uint32_t *)pDst);
#else

#ifdef ENABLE_SPARSE
		float32x4_t vsparse32x4;
#endif
		float32x4x4_t vsrc_32x4x4;
		vsrc_32x4x4.val[0] = vld1q_f32(pSrc);
		vsrc_32x4x4.val[1] = vld1q_f32(pSrc + stride);
#ifdef ENABLE_SPARSE
		vsparse32x4 = vaddq_f32(vsrc_32x4x4.val[0], vsrc_32x4x4.val[1]);
#endif
		vsrc_32x4x4.val[2] = vld1q_f32(pSrc + 2*stride);
#ifdef ENABLE_SPARSE
		vsparse32x4 = vaddq_f32(vsparse32x4, vsrc_32x4x4.val[2]);
#endif
		vsrc_32x4x4.val[3] = vld1q_f32(pSrc + 3*stride);
#ifdef ENABLE_SPARSE
		vsparse32x4 = vaddq_f32(vsparse32x4, vsrc_32x4x4.val[3]);
#endif
		vst4q_f32(pDst, vsrc_32x4x4);
#ifdef ENABLE_SPARSE
		pSparseFlag[i] = vsparse32x4[0] + vsparse32x4[1] + vsparse32x4[2] + vsparse32x4[3];
#endif

#endif
		pSrc += 4;
		pDst += 16;
	}

	if (KHas2)
	{
#ifdef NCOPY_ASM
		pSparseFlag[KDiv4] = ncopy_2x4_asm_sparse((uint32_t *)pSrc, stridex4, (uint32_t *)pDst);
#else

#ifdef ENABLE_SPARSE
		float32x2_t vsparse32x2;
#endif
		float32x2x4_t vsrc_32x2x4;
		vsrc_32x2x4.val[0] = vld1_f32(pSrc);
		vsrc_32x2x4.val[1] = vld1_f32(pSrc + stride);
#ifdef ENABLE_SPARSE
		vsparse32x2 = vadd_f32(vsrc_32x2x4.val[0], vsrc_32x2x4.val[1]);
#endif
		vsrc_32x2x4.val[2] = vld1_f32(pSrc + 2*stride);
#ifdef ENABLE_SPARSE
		vsparse32x2 = vadd_f32(vsparse32x2, vsrc_32x2x4.val[2]);
#endif
		vsrc_32x2x4.val[3] = vld1_f32(pSrc + 3*stride);
#ifdef ENABLE_SPARSE
		vsparse32x2 = vadd_f32(vsparse32x2, vsrc_32x2x4.val[3]);
#endif
		vst4_f32(pDst, vsrc_32x2x4);
#ifdef ENABLE_SPARSE
		pSparseFlag[KDiv4] = vsparse32x2[0] + vsparse32x2[1];
#endif

#endif
		pSrc += 2;
		pDst += 8;
	}

	if (KHas1)
	{
#ifdef NCOPY_ASM
		pSparseFlag[KDiv4+KHas2] = ncopy_1x4_asm_sparse((uint32_t *)pSrc, stridex4, (uint32_t *)pDst);
#else
		pDst[0] = *pSrc;
		pDst[1] = *(pSrc + stride);
		pDst[2] = *(pSrc + 2*stride);
		pDst[3] = *(pSrc + 2*stride);

		pSparseFlag[KDiv4+KHas2] = pDst[0] + pDst[1] + pDst[2] + pDst[3];
#endif
	}

	return ret;
}

static int ncopy_2_k(const float *pSrc, float *pDst, uint32_t K, uint32_t stride, uint32_t numThreads)
{
	int ret = 0;
	uint32_t i, KDiv4, KHas2, KHas1;
	(void)numThreads;
	KDiv4 = K>>2; KHas2 = (K>>1)&1; KHas1 = K&1;

	for ( i = 0; i < KDiv4; i++)
	{
#ifdef NCOPY_ASM
		ncopy_4x2_asm((uint32_t *)pSrc, 4*stride, (uint32_t *)pDst);
#else
		float32x4x2_t vsrc_32x4x2;
		vsrc_32x4x2.val[0] = vld1q_f32(pSrc);
		vsrc_32x4x2.val[1] = vld1q_f32(pSrc + stride);
		vst2q_f32(pDst, vsrc_32x4x2);
#endif
		pSrc += 4;
		pDst += 8;
	}

	if (KHas2)
	{
		*(pDst+0) = *(pSrc);
		*(pDst+1) = *(pSrc + stride);
		*(pDst+2) = *(pSrc + 1);
		*(pDst+3) = *(pSrc + stride + 1);

		pSrc += 2;
		pDst += 4;
	}

	if (KHas1)
	{
		/* Do 1x2 patch copy */
		*(pDst+0) = *(pSrc);
		*(pDst+1) = *(pSrc + stride);
	}

	return ret;
}

static int tcopy_k_4(const float *pSrc, float *pDst, uint32_t K, uint32_t stride, uint32_t numThreads)
{
	int ret = 0;
	uint32_t i, KDiv4, KHas2, KHas1;
#ifdef TCOPY_ASM
	uint32_t stridex4 = 4*stride;
#endif
	(void)numThreads;
	KDiv4 = K>>2; KHas2 = (K>>1)&1; KHas1 = K&1;

	for ( i = 0; i < KDiv4; i++)
	{
#ifdef TCOPY_ASM
		tcopy_4x4_asm((uint32_t *)pSrc, stridex4, (uint32_t *)pDst);
#else
		float32x4x4_t vsrc_32x4x4;
		vsrc_32x4x4.val[0] = vld1q_f32(pSrc);
		vsrc_32x4x4.val[1] = vld1q_f32(pSrc + stride);
		vsrc_32x4x4.val[2] = vld1q_f32(pSrc + 2*stride);
		vsrc_32x4x4.val[3] = vld1q_f32(pSrc + 3*stride);
		vst4q_f32(pDst, vsrc_32x4x4);
#endif
		pSrc += 4*stride;
		pDst += 16;
	}

	if (KHas2)
	{
#ifdef TCOPY_ASM
		tcopy_4x2_asm((uint32_t *)pSrc, stridex4, (uint32_t *)pDst);
#else
		float32x4x2_t vsrc_32x4x2;
		vsrc_32x4x2.val[0] = vld1q_f32(pSrc);
		vsrc_32x4x2.val[1] = vld1q_f32(pSrc + stride);
		vst2q_f32(pDst, vsrc_32x4x2);
#endif
		pSrc += 2*stride;
		pDst += 8;
	}

	if (KHas1)
	{
#ifdef TCOPY_ASM
		tcopy_4x1_asm((uint32_t *)pSrc, stridex4, (uint32_t *)pDst);
#else
		float32x4_t vsrc_32x4_0 = vld1q_f32(pSrc);
		vst1q_f32(pDst, vsrc_32x4_0);
#endif
	}

	return ret;
}

static int tcopy_k_2(const float *pSrc, float *pDst, uint32_t K, uint32_t stride, uint32_t numThreads)
{
	int ret = 0;
	uint32_t i, KDiv4, KHas2, KHas1;
	(void)numThreads;
	KDiv4 = K>>2; KHas2 = (K>>1)&1; KHas1 = K&1;

	for ( i = 0; i < KDiv4; i++)
	{
#ifdef TCOPY_ASM
		tcopy_2x4_asm((uint32_t *)pSrc, 4*stride, (uint32_t *)pDst);
#else
		float32x2x4_t vsrc_32x2x4;
		vsrc_32x2x4.val[0] = vld1_f32(pSrc);
		vsrc_32x2x4.val[1] = vld1_f32(pSrc + stride);
		vsrc_32x2x4.val[2] = vld1_f32(pSrc + 2*stride);
		vsrc_32x2x4.val[3] = vld1_f32(pSrc + 3*stride);
		vst4_f32(pDst, vsrc_32x2x4);
#endif
		pSrc += 4*stride;
		pDst += 8;
	}

	if (KHas2)
	{
		pDst[0] = *pSrc;
		pDst[1] = *(pSrc + 1);
		pDst[2] = *(pSrc + stride);
		pDst[3] = *(pSrc + stride + 1);

		pSrc += 2*stride;
		pDst += 4;
	}

	if (KHas1)
	{
		pDst[0] = pSrc[0];
		pDst[1] = pSrc[1];
	}

	return ret;
}

static int tcopy_k_1(const float *pSrc, float *pDst, uint32_t K, uint32_t stride, uint32_t numThreads)
{
	int ret = 0;
	uint32_t i, KDiv4, KHas2, KHas1;
	(void)numThreads;
	KDiv4 = K>>2; KHas2 = (K>>1)&1; KHas1 = K&1;

	for ( i = 0; i < KDiv4; i++)
	{
#ifdef TCOPY_ASM
		tcopy_1x4_asm((uint32_t *)pSrc, 4*stride, (uint32_t *)pDst);
#else
		pDst[0] = *pSrc;
		pDst[1] = *(pSrc + stride);
		pDst[2] = *(pSrc + 2*stride);
		pDst[3] = *(pSrc + 3*stride);
#endif
		pSrc += 4*stride;
		pDst += 4;
	}

	if (KHas2)
	{
		pDst[0] = *pSrc;
		pDst[1] = *(pSrc + stride);

		pSrc += 2*stride;
		pDst += 2;
	}

	if (KHas1)
		pDst[0] = pSrc[0];

	return ret;
}

/* A[M, K] weight, B[K, N] img, C[M, N]  */
int tinyMatrixMul(const float *A, const float *B, float *C, uint32_t M, uint32_t N, uint32_t K, uint32_t numThreads)
{
	int ret = 0;
	uint32_t i, j, inputBufferIdx = 0;
	uint32_t MDiv4, MHas2, MHas1, NDiv4, NHas2, NHas1, KDiv4, KHas2, KHas1;
	float *pWeight, *pInput, *pOutCur;
	uint32_t *pSparseFlag[MAX_THREAD_NUM];
	uint32_t weightAlignSize, inputSize, sparseAlignSize;

	struct timeval tv_s, tv_e;
    gettimeofday(&tv_s, NULL);

	MDiv4 = M>>2; MHas2 = (M>>1)&1; MHas1 = M&1;
	NDiv4 = N>>2; NHas2 = (N>>1)&1; NHas1 = N&1;
	KDiv4 = K>>2; KHas2 = (K>>1)&1; KHas1 = K&1;

#if 1
	printf("[M N K Threads- %d %d %d %d]\nMDiv4: %03d, MHas2: %d KMas1: %d\nNDiv4: %03d, NHas2: %d NNas1: %d\nKDiv4: %03d, KHas2: %d KHas1: %d\n",
			M, N, K, numThreads, MDiv4, MHas2, MHas1, NDiv4, NHas2, NHas1, KDiv4, KHas2, KHas1);
#endif

	if (numThreads > MAX_THREAD_NUM) numThreads = MAX_THREAD_NUM;

	weightAlignSize = SIZE_ALIGN(4*K*sizeof(float), PAGE_SIZE_4K);
	inputSize = SIZE_ALIGN(K*N*sizeof(float), PAGE_SIZE_4K);
	sparseAlignSize = SIZE_ALIGN(numThreads*(KDiv4 + KHas2 + KHas1)*sizeof(uint32_t), PAGE_SIZE_4K);

	pWeight = (float *)tinyMalloc(weightAlignSize + inputSize + sparseAlignSize);
	if (NULL == pWeight)
	{
		printf("tinyMalloc failed, %u\n", weightAlignSize + inputSize + sparseAlignSize);
		return -1;
	}

	pInput = pWeight + weightAlignSize>>2;

	for(i = 0; i < numThreads; i++)
		pSparseFlag[i] = (uint32_t *)(pInput + inputSize>>2) + i*(KDiv4 + KHas2 + KHas1);

	gettimeofday(&tv_e, NULL);
	printf("time0: %.1f\n", (tv_e.tv_sec * 1000000 - tv_s.tv_sec * 1000000 + tv_e.tv_usec - tv_s.tv_usec) /1000.0f);
	
	gettimeofday(&tv_s, NULL);
	
	ncopy_patch_4x4(B, K, N, N, pInput, numThreads);
	
	gettimeofday(&tv_e, NULL);
	printf("tcopyTime: %.1f\n", (tv_e.tv_sec * 1000000 - tv_s.tv_sec * 1000000 + tv_e.tv_usec - tv_s.tv_usec) /1000.0f);
	
	gettimeofday(&tv_s, NULL);
	
	float ncopyTime = .0f;
	float tcopyTime = .0f;
	float computeTime = .0f;

	//#pragma omp parallel for num_threads(numThreads) firstprivate(inputBufferIdx)
	for (i = 0; i < MDiv4; i++)
	{

		struct timeval beg, end;

		pOutCur = C + i*N*4;

		#if 0//def _OPENMP
		inputBufferIdx = omp_get_thread_num();
		#endif

		gettimeofday(&beg, NULL);
		
		ncopy_4_k(A + i*4*K, pWeight, K, K, numThreads, pSparseFlag[inputBufferIdx]);
		
		gettimeofday(&end, NULL);
		ncopyTime += (end.tv_sec * 1000000 - beg.tv_sec * 1000000 + end.tv_usec - beg.tv_usec) /1000.0f;

		for (j = 0; j < NDiv4; j++)
		{
			gettimeofday(&beg, NULL);

			//tcopy_k_4(B + j*4, pInput[inputBufferIdx], K, N, numThreads);

			gettimeofday(&end, NULL);
			tcopyTime += (end.tv_sec * 1000000 - beg.tv_sec * 1000000 + end.tv_usec - beg.tv_usec) /1000.0f;

			gettimeofday(&beg, NULL);
			
			tinySgemm4xkx4(pWeight, &pInput[inputBufferIdx], pOutCur, K, N, pSparseFlag[inputBufferIdx]);
			
			gettimeofday(&end, NULL);
			computeTime += (end.tv_sec * 1000000 - beg.tv_sec * 1000000 + end.tv_usec - beg.tv_usec) /1000.0f;

			pOutCur += 4;
		}

		if (NHas2)
		{
			gettimeofday(&beg, NULL);

			//tcopy_k_2(B + NDiv4*4, pInput[inputBufferIdx], K, N, numThreads);

			gettimeofday(&end, NULL);
			tcopyTime +=(end.tv_sec * 1000000 - beg.tv_sec * 1000000 + end.tv_usec - beg.tv_usec) /1000.0f;

			gettimeofday(&beg, NULL);

			tinySgemm4xkx2(pWeight, pInput[inputBufferIdx], pOutCur, K, N, pSparseFlag[inputBufferIdx]);

			gettimeofday(&end, NULL);
			computeTime += (end.tv_sec * 1000000 - beg.tv_sec * 1000000 + end.tv_usec - beg.tv_usec) /1000.0f;

			pOutCur += 2;
		}

		if (NHas1)
		{
			gettimeofday(&beg, NULL);

			//tcopy_k_1(B + N - 1, pInput[inputBufferIdx], K, N, numThreads);

			gettimeofday(&end, NULL);
			tcopyTime += (end.tv_sec * 1000000 - beg.tv_sec * 1000000 + end.tv_usec - beg.tv_usec) /1000.0f;

			gettimeofday(&beg, NULL);

			tinySgemm4xkx1(pWeight, pInput[inputBufferIdx], pOutCur, K, N, pSparseFlag[inputBufferIdx]);

			gettimeofday(&end, NULL);
			computeTime += (end.tv_sec * 1000000 - beg.tv_sec * 1000000 + end.tv_usec - beg.tv_usec) /1000.0f;
		}
	}
	
	gettimeofday(&tv_e, NULL);
	printf("time2: %.1f [tcopyTime: %f ncopyTime: %f computeTime: %f]\n", 
		   (tv_e.tv_sec * 1000000 - tv_s.tv_sec * 1000000 + tv_e.tv_usec - tv_s.tv_usec) /1000.0f,
		   tcopyTime, ncopyTime, computeTime);
	
	gettimeofday(&tv_s, NULL);

	if (MHas2)
	{
		float *pOutCur = C + MDiv4*N*4;
		ncopy_2_k(A + MDiv4*4*K, pWeight, K, K, numThreads);

		/* 4x2 */
		//#pragma omp parallel for num_threads(numThreads) firstprivate(inputBufferIdx)
		for (j = 0; j < NDiv4; j++)
		{
			#if 0//def _OPENMP
			inputBufferIdx = omp_get_thread_num();
			#endif

			tcopy_k_4(B + j*4, pInput[inputBufferIdx], K, N, numThreads);

			tinySgemm2xkx4(pWeight, pInput[inputBufferIdx], pOutCur, K, N, pSparseFlag[inputBufferIdx]);

			pOutCur += 4;
		}

		if (NHas2)
		{
			/* 2x2 */
			tcopy_k_2(B + NDiv4*4, pInput[inputBufferIdx], K, N, numThreads);

			tinySgemm2xkx2(pWeight, pInput[inputBufferIdx], pOutCur, K, N, pSparseFlag[inputBufferIdx]);

			pOutCur += 2;
		}

		if (NHas1)
		{
			/* 1x2 */
			tcopy_k_1(B + N - 1, pInput[inputBufferIdx], K, N, numThreads);

			tinySgemm2xkx1(pWeight, pInput[inputBufferIdx], pOutCur, K, N, pSparseFlag[inputBufferIdx]);
		}
	}

	gettimeofday(&tv_e, NULL);
	printf("time3: %.1f\n", (tv_e.tv_sec * 1000000 - tv_s.tv_sec * 1000000 + tv_e.tv_usec - tv_s.tv_usec) /1000.0f);
	
	gettimeofday(&tv_s, NULL);

	if (MHas1)
	{
		float *pOutCur = C + (M-1)*N;
		const float *pWeightCur = A + (M - 1)*K;

		//#pragma omp parallel for num_threads(numThreads) firstprivate(inputBufferIdx)
		for (j = 0; j < NDiv4; j++)
		{
			#if 0//def _OPENMP
			inputBufferIdx = omp_get_thread_num();
			#endif

			tcopy_k_4(B + j*4, pInput[inputBufferIdx], K, N, numThreads);

			tinySgemm1xkx4(pWeightCur, pInput[inputBufferIdx], pOutCur, K, N, pSparseFlag[inputBufferIdx]);

			pOutCur += 4;
		}

		if (NHas2)
		{
			tcopy_k_2(B + NDiv4*4, pInput[inputBufferIdx], K, N, numThreads);

			tinySgemm1xkx2(pWeightCur, pInput[inputBufferIdx], pOutCur, K, N, pSparseFlag[inputBufferIdx]);

			pOutCur += 2;
		}

		if (NHas1)
		{
			tcopy_k_1(B + N - 1, pInput[inputBufferIdx], K, N, numThreads);

			tinySgemm1xkx1(pWeightCur, pInput[inputBufferIdx], pOutCur, K, N, pSparseFlag[inputBufferIdx]);
		}
	}

	tinyFree(pWeight, mallocAlignSize);

	gettimeofday(&tv_e, NULL);
	printf("time4: %.1f\n", (tv_e.tv_sec * 1000000 - tv_s.tv_sec * 1000000 + tv_e.tv_usec - tv_s.tv_usec) /1000.0f);
	
	return ret;
}
